Set A
a) Create a random array of n integers. Accept a value x from user and use linear search 
algorithm to check whether the number is present in the array or not and output the position
if the number is present.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void generate(int *a, int n) {
    for (int i = 0; i < n; i++)
        a[i] = rand() % 100;  // Random numbers 0-99
}

int linearSearch(int *a, int n, int x) {
    for (int i = 0; i < n; i++) {
        if (a[i] == x)
            return i;  // return position (index)
    }
    return -1;  // not found
}

int main() {
    int n, x;
    printf("Enter number of elements: ");
    scanf("%d", &n);

    int arr[n];
    srand(time(0));
    generate(arr, n);

    printf("Generated Array: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");

    printf("Enter number to search: ");
    scanf("%d", &x);

    int pos = linearSearch(arr, n, x);
    if (pos != -1)
        printf("Number found at position %d\n", pos + 1);
    else
        printf("Number not found\n");

    return 0;
}

b) Accept n sorted values in array from user. Accept a value x from user and use binary search 
algorithm to check whether the number is present in sorted array or not and output the 
position if the number is present.

#include <stdio.h>
#include <stdlib.h>

// Binary Search function
int binarySearch(int *arr, int n, int x) {
    int low = 0, high = n - 1;

    while (low <= high) {
        int mid = (low + high) / 2;

        if (arr[mid] == x)
            return mid;       // Found, return index
        else if (x < arr[mid])
            high = mid - 1;  // Search left half
        else
            low = mid + 1;   // Search right half
    }

    return -1;  // Not found
}

int main() {
    int n, x;

    // Read size of array
    printf("Binary Search Program\n");
    printf("Enter number of elements: ");
    scanf("%d", &n);

    // Dynamically allocate array
    int *arr = (int *)malloc(n * sizeof(int));
    if (arr == NULL) {
        printf("Memory allocation failed\n");
        return 1;
    }

    // Read sorted elements
    printf("Enter %d elements in sorted Fashion: ", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    // Read element to search
    printf("Enter number to search: ");
    scanf("%d", &x);

    // Call binary search
    int pos = binarySearch(arr, n, x);

    if (pos != -1)
        printf("Number found at position %d\n", pos + 1);
    else
        printf("Number not found\n");

    free(arr);  // Free allocated memory

    return 0;
}
