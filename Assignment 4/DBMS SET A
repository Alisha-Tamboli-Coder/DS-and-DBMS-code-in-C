Create a table
Employee (empno, name, age, address, salary, deptno)
Insert atleast 10 records into the Employee table.
Execute following queries
1. Display all the details of employee.
2. Display distinct department numbers of employees.
3. Display the details of employee of deptno 5.
4. Display the details of employee who lives in Pune and having salary greater than 50000.
5. Display the details of employee whose age is between 25 and 35.
6. Display the employee number and employee name whose name start with S.
7. Display the details of employee whose name contain substring ‚Äúnit‚Äù.
8. Display the maximum salary of employee.
9. Display average salary of employees.
10. Give the count of employees having age less than 35.
11. Display the total expenditure paid on employee salary.
12. Display the department wise total count of employees.


Assignment 4 Set B


‚úÖ Step 1: Create Employee Table
CREATE TABLE Employee (
    empno INT PRIMARY KEY,
    name VARCHAR(50),
    age INT,
    address VARCHAR(100),
    salary FLOAT,
    deptno INT
);
________________________________________
‚úÖ Step 2: Insert At Least 10 Records
INSERT INTO Employee VALUES
(1, 'Sandeep', 30, 'Pune',    60000, 1),
(2, 'Anita',   28, 'Mumbai', 55000, 2),
(3, 'Rohit',   26, 'Pune',    48000, 5),
(4, 'Sunita',  32, 'Delhi',   75000, 5),
(5, 'Nitin',   29, 'Pune',    52000, 3),
(6, 'Amit',    40, 'Mumbai', 68000, 4),
(7, 'Sneha',   24, 'Pune',    45000, 2),
(8, 'Sourav',  33, 'Delhi',   62000, 1),
(9, 'Raj',     36, 'Mumbai', 71000, 5),
(10,'Sanjit',  31, 'Pune',    50000, 3);
________________________________________

1Ô∏è‚É£ Display All Employee Details
SELECT * FROM Employee;

2Ô∏è‚É£ Display Distinct Department Numbers
SELECT DISTINCT deptno FROM Employee;

3Ô∏è‚É£ Display Employees of deptno = 5
SELECT * FROM Employee
WHERE deptno = 5;

4Ô∏è‚É£ Employees in Pune and Salary > 50000
SELECT * FROM Employee
WHERE address = 'Pune' AND salary > 50000;

5Ô∏è‚É£ Employees aged between 25 and 35
SELECT * FROM Employee
WHERE age BETWEEN 25 AND 35;
________________________________________
6Ô∏è‚É£ Employee Number and Name where Name Starts with 'S'
SELECT empno, name FROM Employee
WHERE name LIKE 'S%';
________________________________________
7Ô∏è‚É£ Employees whose name contains 'nit'
SELECT * FROM Employee
WHERE name ILIKE '%nit%';
‚úÖ Note: ILIKE is case-insensitive in PostgreSQL.
________________________________________
8Ô∏è‚É£ Maximum Employee Salary
SELECT MAX(salary) AS max_salary FROM Employee;
________________________________________
9Ô∏è‚É£ Average Employee Salary
SELECT AVG(salary) AS avg_salary FROM Employee;
________________________________________
üîü Count of Employees Age < 35
SELECT COUNT(*) AS count_under_35 FROM Employee
WHERE age < 35;
________________________________________
1Ô∏è‚É£1Ô∏è‚É£ Total Expenditure on Employee Salaries
SELECT SUM(salary) AS total_salary_expenditure FROM Employee;
________________________________________
1Ô∏è‚É£2Ô∏è‚É£ Dept-wise Total Count of Employees
SELECT deptno, COUNT(*) AS employee_count
FROM Employee
GROUP BY deptno;


Consider Movie Database
Movies (M_name, release_year, budget)
Actor (A_name, role, charges, A_address, age)
Relationship: Many to Many
Create the relations accordingly, so that the relationship is handled properly and the
relations are in normalized form(3NF).
Insert sufficient number of appropriate records.
Solve the Queries:
1. Display the names of actors whose name end with ‚Äòn‚Äô.
2. List the names of the movies with the highest budget.
3. List the names of actors whose charges greater than 200000.
4. List the names of movies release in year 2023.
5. List the names of actors who has maximum charges.
6. List the names of actors who do not live in _________or _________ city.
7. List the names of movies whose budget is between 1cr to 5cr

DBMS Assign4 Set B

Create database ‚Äúmovies‚Äù;

CREATE TABLE Movies (
    movie_id SERIAL PRIMARY KEY,
    m_name VARCHAR(100),
    release_year INT,
    budget NUMERIC
);

CREATE TABLE Actors (
    actor_id SERIAL PRIMARY KEY,
    a_name VARCHAR(100),
    role VARCHAR(50),
    charges NUMERIC,
    a_address VARCHAR(100),
    age INT
);

-- Relationship Table (Many-to-Many)
CREATE TABLE Movie_Actor (
    movie_id INT REFERENCES Movies(movie_id),
    actor_id INT REFERENCES Actors(actor_id),
    PRIMARY KEY(movie_id, actor_id)
);

INSERT INTO Movies (m_name, release_year, budget) VALUES
('Pathaan', 2023, 2500000000),
('RRR', 2022, 4500000000),
('Jawaan', 2023, 3000000000);

INSERT INTO Actors (a_name, role, charges, a_address, age) VALUES
('Shahrukh ', 'Hero', 500000000, 'Mumbai', 47),
('NTR', 'Hero', 300000000, 'Hyderabad', 37),
('Ram Charan', 'Hero', 350000000, 'Hyderabad', 38),
('Deepika ', 'Heroine', 200000000, 'Bangalore', 34);

INSERT INTO Movie_Actor VALUES
(1,1), (1,4),        -- Pathaan: Shahrukh, Deepika
(2,2), (2,3),        -- RRR: NTR, Ram Charan
(3,1), (3,4);       -- Jawaan: Shahrukh, Deepika


-- 1. Display the names of actors whose name end with 'n'-------------------
SELECT a_name FROM Actors WHERE a_name LIKE '%n';

-- 2. List the names of the movies with the highest budget ----------------
SELECT m_name FROM Movies WHERE budget = (SELECT MAX(budget) FROM Movies);

-- 3. List the names of actors whose charges greater than 200000----------------------
SELECT a_name FROM Actors WHERE charges > 200000;

-- 4. List the names of movies release in year 2023----------------
SELECT m_name FROM Movies WHERE release_year = 2023;

-- 5. List the names of actors who has maximum charges-----------------
SELECT a_name FROM Actors WHERE charges = (SELECT MAX(charges) FROM Actors);

-- 6. List the names of actors who do not live in Mumbai or Hyderabad------------------------
SELECT a_name FROM Actors WHERE a_address NOT IN ('Mumbai','Hyderabad');

-- 7. List the names of movies whose budget is between 1cr to 5cr--------------------
SELECT m_name FROM Movies WHERE budget BETWEEN 10000000 AND 50000000;


